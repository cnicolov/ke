package system

import (
	"reflect"

	"kego.io/json"
)

type Map_rule struct {
	*Object
	Items Rule
}

func (r *Map_rule) Base() *Object {
	return r.Object
}

type Array_rule struct {
	*Object
	Items Rule
}

func (r *Array_rule) Base() *Object {
	return r.Object
}

type String_rule struct {
	*Object
	Default String
}

func (r *String_rule) Base() *Object {
	return r.Object
}

type Number_rule struct {
	*Object
	Default Number
}

func (r *Number_rule) Base() *Object {
	return r.Object
}

type Reference_rule struct {
	*Object
	Default Reference
}

func (r *Reference_rule) Base() *Object {
	return r.Object
}

type Bool_rule struct {
	*Object
	Default Bool
}

func (r *Bool_rule) Base() *Object {
	return r.Object
}

// This is the most basic type.
type Type struct {
	*Object
	// Type which this should extend
	Extends Reference `kego:"{\"default\": \"kego.io/system:object\"}"`
	// Is this type an interface?
	Interface Bool `kego:"{\"default\": false}"`
	// Array of interface types that this type should support
	Is []Reference
	// This is the native json type that represents this type. If omitted, default is object.
	Native     String `kego:"{\"default\": \"object\"}"`
	Properties map[string]*Property
	Rule       *Type
}

func (t *Type) Base() *Object {
	return t.Object
}

type Rule_rule struct {
	*Object
}

func (r *Rule_rule) Base() *Object {
	return r.Object
}

type Import_rule struct {
	*Object
}

func (r *Import_rule) Base() *Object {
	return r.Object
}

type Property_rule struct {
	*Object
}

func (r *Property_rule) Base() *Object {
	return r.Object
}

type Type_rule struct {
	*Object
}

func (r *Type_rule) Base() *Object {
	return r.Object
}

func init() {
	json.RegisterType("kego.io/system:object", reflect.TypeOf(&Object{}))
	json.RegisterType("kego.io/system:type", reflect.TypeOf(&Type{}))
	json.RegisterType("kego.io/system:@bool", reflect.TypeOf(&Bool_rule{}))
	json.RegisterType("kego.io/system:@string", reflect.TypeOf(&String_rule{}))
	json.RegisterType("kego.io/system:@number", reflect.TypeOf(&Number_rule{}))
	json.RegisterType("kego.io/system:@map", reflect.TypeOf(&Map_rule{}))
	json.RegisterType("kego.io/system:@array", reflect.TypeOf(&Array_rule{}))
	json.RegisterType("kego.io/system:@rule", reflect.TypeOf(&Rule_rule{}))
	json.RegisterType("kego.io/system:@reference", reflect.TypeOf(&Reference_rule{}))
	json.RegisterType("kego.io/system:@import", reflect.TypeOf(&Import_rule{}))
	json.RegisterType("kego.io/system:@property", reflect.TypeOf(&Property_rule{}))
	json.RegisterType("kego.io/system:@type", reflect.TypeOf(&Type_rule{}))
}

type Property struct {
	*Object
	Optional Bool `kego:"{\"default\": false}"`
	Item     Rule
}

func (p *Property) Base() *Object {
	return p.Object
}

// This is the most basic type.
type Object struct {
	// Description for the developer
	Description String
	// All global objects should have an id.
	Id String
	// Type of the object.
	Type Reference
	// Unmarshaling context. This should not be in the json - it's added by the unmarshaler.
	Context *json.Context
}
