// Automatically generated by MockGen. DO NOT EDIT!
// Source: io (interfaces: ReadWriteCloser)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of ReadWriteCloser interface
type MockReadWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *_MockReadWriteCloserRecorder
}

// Recorder for MockReadWriteCloser (not exported)
type _MockReadWriteCloserRecorder struct {
	mock *MockReadWriteCloser
}

func NewMockReadWriteCloser(ctrl *gomock.Controller) *MockReadWriteCloser {
	mock := &MockReadWriteCloser{ctrl: ctrl}
	mock.recorder = &_MockReadWriteCloserRecorder{mock}
	return mock
}

func (_m *MockReadWriteCloser) EXPECT() *_MockReadWriteCloserRecorder {
	return _m.recorder
}

func (_m *MockReadWriteCloser) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockReadWriteCloserRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockReadWriteCloser) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReadWriteCloserRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockReadWriteCloser) Write(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReadWriteCloserRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}
