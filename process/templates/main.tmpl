{{ $path := .Path }}
{{ $imports := .Imports }}
package {{ $path | name }}

import (
	"reflect"

	"kego.io/json"

	{{ if not (eq $path "kego.io/system") }}
		"kego.io/system"
	{{ end }}

	{{ range $importName, $importPath := $imports }}
		{{ import $importName $importPath $path }}
	{{ end }}
)

{{ range $typeName, $type := .Types }}

	{{ $name := $type.Id }}
	{{ $full := $typeName }}
	{{ $go := $type.GoName }}

	{{ $vars := map "type" $type "name" $name "full" $full "go" $go "path" $path "imports" $imports }}

	//***********************************************************
	//*** {{ $name }} ***
	//***********************************************************

	{{ if not $type.Interface }}
		{{/* We don't need these bits for interface types */}}
		{{ template "struct.tmpl" $vars }}
	{{ end }}
{{ end }}

func jsonTypes() map[string]reflect.Type {
	return map[string]reflect.Type{
		{{ range $typeName, $type := .Types }}
			{{ if not $type.Interface }}
				{{ $typeName | quote }}: reflect.TypeOf(&{{ $type.GoName }}{}),
			{{ end }}
		{{ end }}
	}
}

func systemTypes() map[string]*{{ reference "kego.io/system" "Type" $path $imports }} {
	return map[string]*{{ reference "kego.io/system" "Type" $path $imports }}{
		{{ range $typeName, $type := .Types }}
			{{ $typeName | quote }}: &{{ $type.GoSyntax $path $imports }},
		{{ end }}
	}
}

func init() {
	{{ reference "kego.io/json" "RegisterPackage" $path $imports }}({{ $path | quote }}, jsonTypes)
	{{ reference "kego.io/system" "RegisterPackage" $path $imports }}({{ $path | quote }}, systemTypes)
}
