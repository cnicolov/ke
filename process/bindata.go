package process

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _cmd_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x50\xcd\x4e\xfb\x30\x0c\x3f\x27\x4f\xe1\x7f\xf5\x3f\x24\x52\xd4\x89\x2b\x68\x07\x0e\x0c\xed\xc0\xb4\x37\x98\xa2\xce\x1b\xd6\xda\xa4\x24\x19\x62\x9a\xfa\xee\x38\x25\x2b\x88\x0f\x09\x91\x43\xeb\xd8\xce\xef\xeb\x7c\x86\xff\xbd\x4d\x8f\x70\x3d\x87\x7a\x9d\x8b\x61\x90\xb9\x49\x5d\xef\x43\x8a\x63\x7f\x59\x6a\x1e\xf5\xb6\x39\xd8\x3d\x42\x67\xc9\x49\xf9\xb6\x04\x4a\x8a\xca\xc7\x8a\xbf\xbb\x2e\xe5\xdf\x01\xf7\xbe\x26\x3f\xeb\x83\x6f\x30\xf2\x44\x8a\x0d\x4c\xdd\x78\x8a\x09\xbb\x4a\x02\x1f\xa6\xa2\x1d\x38\xcf\x20\xf8\x54\xa4\x7c\x5e\xd4\x99\x58\x7c\x45\x98\xa5\x53\x8f\x99\x96\x41\xd0\x6d\xf3\xd6\x58\x07\xeb\x58\x61\x71\xb0\xb2\x1d\x9a\xcb\x65\x5d\x9c\x4e\xee\x2e\xc0\xef\x8e\x4b\x06\xd5\x0f\xfd\x6f\x38\xb5\x94\xbb\xa3\x6b\xc6\x48\x94\x86\xb3\x14\x5b\x0a\x06\x12\xc6\x64\x20\x60\x73\x0c\x91\x9e\x59\x43\xf6\x66\xa0\x30\x1b\xc0\x10\xb2\x94\x12\x51\xbd\x74\x94\xc8\xb6\x14\x51\x69\x29\x38\x93\x3c\xff\x37\x07\x47\x6d\x86\x14\x9c\x6c\xbd\x0e\xe4\x52\xeb\x14\x8f\xf4\x98\x5e\x3e\x3e\xd6\x77\x2f\x94\xd4\x15\x3f\x1b\xa6\x97\x1f\x90\xef\xd1\x61\xb0\x09\x17\xd4\x62\x54\x97\xee\x62\xf3\x70\xbb\x5c\x19\xf8\x85\x56\x7d\xf3\x47\x31\xc3\x6b\x00\x00\x00\xff\xff\x9c\x2e\x29\x64\x5e\x02\x00\x00")

func cmd_main_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_main_tmpl,
		"cmd_main.tmpl",
	)
}

func cmd_main_tmpl() (*asset, error) {
	bytes, err := cmd_main_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_main.tmpl", size: 606, mode: os.FileMode(420), modTime: time.Unix(1434737862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmd_types_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\xb1\x4e\xc3\x30\x10\x86\x67\xfb\x29\x8e\x8a\x21\x91\xa2\x54\xac\xa0\x0e\x95\x68\x51\x17\x14\x89\x2e\x4c\x95\x95\x5e\xcb\xa9\x89\x1d\x6c\x17\x51\x55\x79\x77\xce\xc1\x8d\x02\xed\x00\x12\x78\x48\xce\x77\xe7\xff\x3e\xff\x3e\x1e\xe1\xba\x51\xfe\x05\x6e\x27\x90\x17\x21\x68\x5b\x19\x92\x54\x37\xc6\x7a\xd7\xe5\x17\x31\xe6\x52\xa3\xca\x9d\xda\x22\xd4\x8a\xb4\x94\x9f\x4d\x90\x48\x31\x32\x6e\xc4\xdf\x4d\xed\xc3\x6f\x87\x5b\x93\x93\x19\x37\xd6\x94\xe8\xb8\x22\xc5\x0a\xfa\xac\x3b\x38\x8f\xf5\x48\x02\x2f\x1e\x45\x1b\xd0\x86\x45\xf0\x35\xa2\x7c\x6f\x4c\xc3\x60\x71\xae\x30\xf6\x87\x06\xc3\x58\x16\x41\xbd\x0e\x5d\x5d\xfc\x0b\xc1\xfe\xfa\x6d\x7b\xae\x63\x95\xe6\x9b\x46\x27\x1e\x55\x8d\xd9\x69\x53\x44\xc7\x7a\x97\x86\x7a\x83\x96\x4e\xf5\x62\xfe\x02\x7b\x2a\xe5\x66\xaf\xcb\xce\xda\x24\x85\xa3\x14\x6b\xb2\x19\x78\x74\x3e\x03\x8b\xe5\xde\x3a\x7a\x63\x86\xc0\x9b\x41\x9c\x9c\x01\x5a\x1b\x50\xa2\xd5\xf9\x42\x93\x27\x55\x91\xc3\x24\x95\x82\xad\x08\xf5\xab\x09\x68\xaa\x82\xa4\xe0\x17\xca\x0b\x4b\xda\x57\x3a\xe1\x52\xda\xbd\x42\x58\xc6\xe5\xb3\x77\xf2\xc9\x0d\x1f\x6b\xfb\x93\x03\xe5\x07\xd4\x68\x95\xc7\x39\x55\xe8\x92\x53\x76\xbe\x5a\x3e\x17\xb3\xa7\x0c\x7e\x00\x9b\xde\xfd\x3f\xcd\xfd\x74\x39\xfd\x2b\x18\x21\xbe\x62\xb4\x1f\x01\x00\x00\xff\xff\xe6\x3c\x1a\xd6\x2e\x03\x00\x00")

func cmd_types_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_types_tmpl,
		"cmd_types.tmpl",
	)
}

func cmd_types_tmpl() (*asset, error) {
	bytes, err := cmd_types_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_types.tmpl", size: 814, mode: os.FileMode(420), modTime: time.Unix(1434737862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmd_validate_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x50\xb1\x4e\xc3\x30\x10\x9d\xed\xaf\x38\x22\x06\x5b\x8a\x52\xb1\x82\x3a\x32\x74\x41\x9d\x58\x2b\x2b\xbd\x96\x53\x1b\x3b\xd8\x2e\xa2\xaa\xfc\xef\x9c\x83\x1b\x25\x50\x44\x86\xe4\xf2\xee\xee\xbd\x77\xef\x72\x81\xfb\xde\xc4\x37\x78\x5c\x42\xb3\xce\x45\x4a\x32\x83\xd4\xf5\xce\xc7\x30\xe0\xab\x52\x73\xab\x37\xed\xc1\xec\x11\x3a\x43\x56\xca\xef\x21\x50\x52\x54\x2e\x54\xfc\xde\x75\x31\x7f\x0e\xb8\x77\x0d\xb9\x45\xef\x5d\x8b\x81\x3b\x52\x6c\x60\x44\xc3\x39\x44\xec\xaa\x1b\xd8\x22\x9e\x7b\x1c\xc6\xd9\x02\xed\xc0\x3a\x26\xc7\xf7\x62\xf1\x27\x81\xce\x86\x44\x66\x19\xaf\x48\xa9\xfa\x85\x5c\x49\x33\x27\xda\x6d\x5e\x1a\x6a\x6f\x2c\x1f\x52\x0e\x7d\x31\x1d\xd6\xd7\x9f\x75\x09\x64\x0c\x61\xaa\x33\x19\x99\xa9\xcd\xf0\x1b\x9a\x5a\xca\xdd\xc9\xb6\x43\x72\x4a\xc3\x45\x8a\x2d\xf9\x1a\x36\x35\x78\x6c\x4f\x3e\xd0\x07\x1b\xc8\x96\x6b\x28\xb2\x35\xa0\xf7\xd9\x47\x89\xb1\x59\x59\x8a\x64\x8e\x14\x50\x69\x29\x38\x9f\xdc\xbf\x5b\x82\xa5\x63\xe6\x13\x9c\x7e\xb3\xf6\x64\xe3\xd1\x2a\x6e\x69\x09\xe5\x71\xa1\x79\xfe\xa4\xa8\x1e\x78\x2d\x8d\x9b\x13\xe6\x57\x66\xdd\x9a\x88\x6a\xf0\xf4\x97\x21\xfd\xf4\xaf\xa2\x10\x73\xad\xf4\x15\x00\x00\xff\xff\x46\x99\x1e\xd6\x61\x02\x00\x00")

func cmd_validate_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_validate_tmpl,
		"cmd_validate.tmpl",
	)
}

func cmd_validate_tmpl() (*asset, error) {
	bytes, err := cmd_validate_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_validate.tmpl", size: 609, mode: os.FileMode(420), modTime: time.Unix(1434737862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _global_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\xcd\x4a\x03\x31\x10\x3e\x6f\x9e\x62\x28\x1e\x2c\xc8\x7a\x17\x7a\x16\x2f\x4b\xdf\x40\x62\x9d\x6e\x43\xbb\x99\x35\x89\x82\xb4\x7d\x77\x33\x33\xd9\xcd\x2a\x08\xbd\x4d\xe6\x9b\xef\x87\x2f\xe7\x33\xdc\x8d\x36\x1d\xe0\x69\x03\xed\x96\x87\xeb\xd5\xf0\xd2\x0d\x23\x85\x14\x65\xff\x52\xe6\x0c\x8d\x76\x77\xb4\x3d\xc2\xcc\xbb\x80\xb7\x03\x32\x64\x94\x02\xf7\xa6\xc9\xa8\xdb\x83\xa7\xfc\xc0\x8f\x72\xb8\x3a\x62\x4f\xad\xa3\xc7\xf8\x1d\x13\x0e\xab\x35\x73\x9a\xe6\xef\x5a\xc8\xe8\xdf\x45\x91\xe7\x60\x7d\xf6\x2b\x79\xba\xec\xf5\x30\x3d\xb6\x25\xf7\x9c\x55\x04\xd9\x5b\x83\x2c\x38\xbf\x28\x9a\x87\x8f\xab\xd5\xda\x98\xea\x35\x92\xf3\x09\x83\x76\xa2\x73\x9c\xee\x67\x50\x7b\x9a\x92\x56\x72\xc0\x7d\x4e\x18\xe9\x33\xec\x50\x14\x9e\x4f\xf4\x66\x4f\x2a\xf0\x65\x83\x54\x97\x8f\x5a\xc9\x75\x81\x9e\x4a\x81\xb0\x11\xa8\x30\xff\x93\xbf\xb5\x07\x76\x7a\x85\xfa\x93\x9d\x9a\xb4\x1d\xa5\x83\xf3\xfd\x42\xfc\x27\x00\x00\xff\xff\x9a\xa5\xaf\xa3\x03\x02\x00\x00")

func global_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_global_tmpl,
		"global.tmpl",
	)
}

func global_tmpl() (*asset, error) {
	bytes, err := global_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "global.tmpl", size: 515, mode: os.FileMode(420), modTime: time.Unix(1434811054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\x3d\xdb\xbf\x82\x10\x8a\x2d\x0e\x0a\xfb\x3e\x60\xe7\xa1\x97\xac\x18\x0a\xec\x38\x68\x0e\xed\x68\x6d\x24\x57\x66\x06\x14\xae\xff\xfb\x48\x49\xfe\x0a\x36\x6c\x6b\x4e\x32\x3f\x1e\x1f\x1f\xc9\x0c\x03\xdc\x74\x9a\x4e\xf0\xe1\x23\x94\xf7\xf2\x18\xc7\x5c\x8c\xe6\xdc\x39\x4f\x7d\xb0\xdf\xa5\x37\xbb\x3a\x5d\x3f\xea\x16\x61\xce\x7b\x05\xab\xcf\x28\xae\x3c\xa6\xc0\x2e\xcf\x94\xc7\xe6\x09\x6b\x52\x39\xbf\x1f\xb1\x75\xa5\x71\xd5\x8f\xde\x59\x31\x70\xaa\x69\xc0\x3a\x8e\xc4\xe7\x84\x32\x07\xf5\x2f\x3d\xe1\x59\x15\x02\x98\x65\xd7\xe6\x90\x8c\xf6\x18\xca\xc9\xdb\x6b\xcb\x64\x12\xd9\x03\x13\xb9\x9d\x3e\xee\x53\x53\x73\x23\x01\x50\x6a\x47\x96\xab\x9c\x4d\x4a\xe4\x23\xc1\x4b\xa9\x22\xcf\x97\x5a\xdc\x1a\x17\xa1\x97\x0e\x83\x36\x0f\xfc\xe8\x67\x3e\x37\x41\x0c\x29\x2b\x01\xe5\xdd\xb1\x3c\x24\x75\x82\xb7\x75\x8b\xef\x93\x9b\x5c\xd1\xf7\x53\xfb\xa0\xf6\x59\x77\xa0\x24\x42\xa5\x2a\x4a\x30\x55\x82\x56\xad\x53\x01\x47\x09\x4f\x35\xc9\x97\x9a\x54\x9b\x76\xf3\xac\xaa\xf6\x6f\xff\xa5\x74\x98\xdb\x1a\x47\x58\xcc\x6f\x46\x5d\x2f\x40\x52\xc9\x12\xfa\x46\xd7\x38\xcd\xa8\xda\xc3\x57\x84\xa3\xb3\xef\x09\x2c\xe2\x11\xe8\x84\x3d\xc2\x77\xc3\x7d\x35\xce\x83\x99\x13\x28\xa8\xbf\xaf\xa6\xe1\xf2\x92\x74\x4f\x9a\x58\xa7\x9e\xfc\xa5\xa6\x92\xf8\x5b\x25\x71\xb7\x43\x5d\x6d\x52\x73\xb1\x35\x83\x1a\xda\x15\x30\xac\xf7\xea\x4f\xb3\xce\xfe\xd6\x43\xc0\xc0\x06\x3d\x5a\x36\x6d\x4f\x00\xd4\x17\x6c\x0d\xef\xb3\x7f\x88\x53\x0e\x23\x5c\x0d\x6e\x27\x8a\x73\x36\xdf\x63\x3c\xb6\x57\x78\xbe\x38\x12\xe8\x5b\x98\x7c\x61\x79\xd6\x8e\x74\x72\x81\xe4\xe7\x66\xf7\x4e\x02\xb7\x8b\x36\x8c\x45\x11\xa9\xa7\xc6\xaf\xaf\xe9\x5f\xcf\x92\xd5\x84\x6f\x10\x6d\xe5\xc1\xd1\xc9\xd8\x36\xbf\xc2\xfd\xdf\xcb\x8c\x98\xcb\x3f\x4f\xe2\xfc\x3b\x78\x66\x1b\x46\x92\x5c\x10\x47\x3d\x8c\xbf\x02\x00\x00\xff\xff\xb4\x22\x34\x92\xcc\x04\x00\x00")

func main_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_main_tmpl,
		"main.tmpl",
	)
}

func main_tmpl() (*asset, error) {
	bytes, err := main_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "main.tmpl", size: 1228, mode: os.FileMode(420), modTime: time.Unix(1434811054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _struct_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\x4f\x4b\xc4\x30\x10\xc5\xcf\xed\xa7\x18\x4a\x0f\x2a\x52\xef\x82\x17\x41\xc5\xcb\x1e\x3c\x78\x95\x6c\x32\x8d\xc1\x36\x53\x92\xa9\xb8\xd4\xfd\xee\xe6\xdf\x6e\x0b\xc2\xde\xde\xbc\x1f\xf3\x26\x33\x59\x16\x68\x27\xc1\x9f\x70\xff\x00\x5d\x12\xc7\x63\x1d\x4d\x33\x4e\xe4\xd8\x27\xff\xa4\x33\x32\x3d\x08\xab\xe0\xca\x12\x43\xc7\x87\x09\xbb\x57\xbf\x13\x6c\xbe\xf1\x5d\x0c\x33\x5e\x6f\xc9\xd3\x8f\x1c\x66\x15\xbc\xdc\x9a\x4c\xf8\x05\x85\x5e\x3a\x33\xb1\x21\x1b\x49\x72\x23\xd6\x14\x4a\xf0\xec\x66\xc9\xb0\xd4\x75\x95\xc7\xad\x79\x8f\xc2\x1b\x19\x5b\xaa\xea\x26\x30\x87\x3d\x3a\xb4\x12\x3f\x8c\x82\xe6\x0b\x35\x75\x86\xee\xfc\xc1\x33\x8e\x0d\x34\x7b\xe1\xb1\x29\xfb\xb5\x9b\x25\x62\x2c\x86\x15\x8a\x74\xc2\x6a\x84\x16\xc7\x3d\xaa\xb4\x6f\x7e\x7a\x2a\xcf\xa3\x32\xee\x5e\xe8\xed\x34\xf3\x72\xf0\x36\xb9\x37\x38\xa8\x9d\x18\xf1\xb6\xe8\x75\xca\x73\x2c\xcf\xbd\x85\xfe\x3b\xd0\xca\x62\x4a\xe0\x9a\x6c\x14\xe1\x58\x81\x68\x4a\x07\x2c\xcd\x17\x5f\x95\x7e\x21\xeb\xbf\x00\x00\x00\xff\xff\x63\xbc\x02\x72\xfa\x01\x00\x00")

func struct_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_struct_tmpl,
		"struct.tmpl",
	)
}

func struct_tmpl() (*asset, error) {
	bytes, err := struct_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "struct.tmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(1434769239, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _types_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\x4d\x6b\x83\x40\x10\x3d\xc7\x5f\x31\x48\x0f\x11\x42\x72\x2f\xf4\x07\xf4\x22\xa1\xf4\x1e\x16\x3b\x9a\x25\x38\x6b\xd6\xb5\x10\x8c\xff\xbd\xb3\x5f\xba\xb1\x04\x0a\xbd\x8d\xf3\xf6\x3d\xdf\xcc\xbc\x71\x84\x97\x4e\x98\x33\xbc\xbe\xc1\xfe\x68\x8b\x69\xca\x6c\x53\xb6\x9d\xd2\xa6\x77\xfd\xf7\x50\x07\x88\x14\x7d\xde\x3a\xec\x8f\x91\x57\xa6\x0d\x7e\xd4\x89\xea\x22\x1a\x84\x59\xfc\x0e\x24\x5a\xb4\x50\xe6\x75\x61\x9b\x6d\x18\x95\x35\x90\xe2\x0f\xbc\x86\x87\xf9\x05\x1b\xb5\x97\xea\xd0\xdf\x7a\x83\x6d\x5e\x58\xce\x66\xb3\x6e\x3b\x32\xd2\x97\x53\xfc\x8b\xd0\xc1\x58\x7f\x51\xee\xf4\x04\xfe\x25\xab\x05\xf1\x18\x61\x17\x25\x8f\xb0\x8b\x1f\x71\xf6\x79\x4f\x4e\xd8\x3a\xf1\xf3\x25\x9c\x07\x8a\x77\x17\x1f\xbb\xdf\x3e\xc1\x17\x2b\x45\x96\xd5\x03\x55\x20\x49\x9a\x6d\x01\x63\x6a\xad\x53\x92\x0c\x6a\x7f\x3e\x5f\x2f\x5e\x66\xf4\x51\x2f\xe5\x6b\xac\x79\xa6\x5e\x0d\xba\x42\x27\xe2\x0e\x39\x2b\x30\x8c\x1a\x89\xb1\xf5\x09\x20\xff\xc0\x46\x72\xa9\x2d\x23\x0f\xc6\x93\x75\x6c\xad\x01\xe6\x73\xaa\x7c\x1a\xee\x70\x1d\x94\xb1\x29\xd8\x41\xc4\xdc\x7e\xd6\x40\x70\x33\x4d\xc5\xbf\x0f\xf2\x2d\x34\x9c\x60\xc9\x73\xe9\x63\xc8\x89\x35\x67\x49\x4d\xaa\x3f\xfd\x04\x00\x00\xff\xff\x89\x9a\xc6\x55\x0b\x03\x00\x00")

func types_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_types_tmpl,
		"types.tmpl",
	)
}

func types_tmpl() (*asset, error) {
	bytes, err := types_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "types.tmpl", size: 779, mode: os.FileMode(420), modTime: time.Unix(1434811054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd_main.tmpl":     cmd_main_tmpl,
	"cmd_types.tmpl":    cmd_types_tmpl,
	"cmd_validate.tmpl": cmd_validate_tmpl,
	"global.tmpl":       global_tmpl,
	"main.tmpl":         main_tmpl,
	"struct.tmpl":       struct_tmpl,
	"types.tmpl":        types_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"cmd_main.tmpl":     &_bintree_t{cmd_main_tmpl, map[string]*_bintree_t{}},
	"cmd_types.tmpl":    &_bintree_t{cmd_types_tmpl, map[string]*_bintree_t{}},
	"cmd_validate.tmpl": &_bintree_t{cmd_validate_tmpl, map[string]*_bintree_t{}},
	"global.tmpl":       &_bintree_t{global_tmpl, map[string]*_bintree_t{}},
	"main.tmpl":         &_bintree_t{main_tmpl, map[string]*_bintree_t{}},
	"struct.tmpl":       &_bintree_t{struct_tmpl, map[string]*_bintree_t{}},
	"types.tmpl":        &_bintree_t{types_tmpl, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
