package process

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _cmd_types_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x51\x31\x4f\xf3\x30\x10\x9d\x7d\xbf\xe2\xbe\xe8\x1b\x62\x09\xa5\x62\x05\x75\x6c\x11\x0b\x8a\x04\x0b\x53\x65\x85\x4b\xb1\x9a\xd8\xc1\x36\x12\x55\xe4\xff\xce\xd9\xb8\x51\x45\xbb\xe0\x21\xb9\xbc\x7b\x79\xef\xee\x79\x9e\xf1\xff\xa4\xc2\x3b\xde\xad\xb1\x69\x53\x11\x23\x24\x50\x8f\x93\x75\xc1\x67\xfc\xb1\xd4\xdc\x9a\x54\x77\x50\x7b\xc2\x51\x69\x03\xf0\x43\xc2\x1a\x44\x65\x7d\xc5\xcf\x7e\x0c\xe9\x75\xa0\xbd\x6d\xb4\x5d\x4d\xce\x76\xe4\xb9\x03\x62\x87\x0b\xea\x8f\x3e\xd0\x58\x01\xf2\x61\x2b\xdd\xa3\xb1\x2c\x42\x1f\x65\x94\xdf\x44\x99\x8c\xc5\xa5\xc2\x2a\x1c\x27\x4a\xb6\x2c\x42\xe6\x2d\xb1\x72\xfd\x07\xc1\x65\xfd\x18\x2f\x75\x9c\x32\xbc\x69\x49\xe2\x49\x8d\x74\x73\xfa\x68\x4b\x62\x4b\x4a\xe7\x7a\x67\x94\xac\x7a\x15\xbf\x32\xbb\x04\xe8\x3f\x4d\x97\xa3\xad\x25\xce\x20\x78\x11\x72\x2e\x19\x95\x20\x9b\x07\x32\xe4\x54\xa0\xad\x1e\xc8\xd7\x27\x74\xbb\x7b\x79\x6d\x37\xcf\xf2\x3e\xd3\xff\xad\xd1\xe8\x21\xfd\x2f\xf8\x3a\x9a\xd6\x69\x13\x06\x53\x73\x4b\xe6\xc8\xd3\xb1\xbe\xd9\x7c\xe9\x50\xdf\x4a\x10\x11\xe2\x77\x00\x00\x00\xff\xff\xbe\x35\x6b\xfb\x06\x02\x00\x00")

func cmd_types_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_types_tmpl,
		"cmd_types.tmpl",
	)
}

func cmd_types_tmpl() (*asset, error) {
	bytes, err := cmd_types_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_types.tmpl", size: 518, mode: os.FileMode(420), modTime: time.Unix(1434278840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmd_validate_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\x3d\x4f\xc3\x30\x10\x9d\xe3\x5f\x61\x22\x06\x5b\x42\xae\x58\x41\x1d\x41\x62\x41\x99\x58\x91\x95\x5e\x8a\xd5\xf8\x03\xdb\x48\x54\x91\xff\x3b\x77\xc6\x8d\x5a\xe8\x92\x9c\xdf\xdd\xbd\x77\xef\x2d\x0b\xbf\x0d\x3a\x7f\xf0\x87\x2d\x57\x03\x15\xa5\x30\x02\x8d\x0d\x3e\xe6\x54\xf1\x97\x56\x63\x2b\xe8\xf1\xa0\xf7\xc0\xad\x36\x8e\xb1\xdf\x21\x2e\x58\xd7\xfb\xd4\xe3\x77\xb2\x99\x7e\x07\xd8\x7b\x65\xfc\x26\x44\x3f\x42\xc2\x0e\xeb\xde\xf9\x8a\xa6\x63\xca\x60\xfb\x2b\xd8\x26\x1f\x03\xd4\x71\x3c\xc1\x4c\xdc\x79\x24\x87\xcf\x76\xe2\x5f\x02\x49\x07\x75\xc4\xb2\xba\x28\xa5\xff\x87\x9c\x48\x89\x13\xdc\x8e\x96\x6a\x1d\xb5\x43\x23\xcd\xe8\xab\xb6\x70\x77\x7a\x0c\x2d\x90\x35\x84\x73\x9d\xb3\x91\x0b\xb5\x0b\xfc\x8a\xa6\x64\x6c\xfa\x72\x63\x4d\x4e\x48\xbe\xb0\x0e\x0d\x42\x8c\x24\xd4\x72\x52\x6f\x7a\x36\x3b\x9d\xe1\xd9\xcc\x90\x84\x7c\xac\xfd\x9b\x2d\x77\x66\xa6\x85\x0e\xe3\x55\x43\x34\x2e\xcf\x4e\x60\x4b\x22\xe4\x93\x7a\xfa\x36\x59\xdc\xe3\xa3\xb0\xf2\x13\x00\x00\xff\xff\xad\xab\x81\xf2\xd0\x01\x00\x00")

func cmd_validate_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_validate_tmpl,
		"cmd_validate.tmpl",
	)
}

func cmd_validate_tmpl() (*asset, error) {
	bytes, err := cmd_validate_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_validate.tmpl", size: 464, mode: os.FileMode(420), modTime: time.Unix(1434278836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x4d\x8b\xdb\x30\x10\x3d\xdb\xbf\x62\x18\x42\x1b\x87\x25\xbe\x17\x7a\x2b\x94\xbd\xa4\x4b\x59\xe8\x59\x75\xc6\x8e\xba\x89\xe4\x95\x27\x85\x25\xeb\xff\x5e\x8d\x2c\xc9\x76\x0f\x2d\xc4\xa7\xf1\x7c\xbc\x37\xf3\x66\x74\xbb\xc1\xa6\x57\x7c\x82\x4f\x9f\x61\xff\x24\xc6\x38\x96\xe2\xd4\x97\xde\x3a\x1e\x82\xff\x31\xda\x3e\xd4\xab\xe6\x45\x75\x04\xb9\xee\x1d\x8c\xba\x90\x84\xca\xa9\x04\xb6\x65\x81\x8e\xda\x33\x35\x8c\xa5\xb7\x5f\xa8\xb3\x7b\x6d\xeb\x5f\x83\x35\xe2\xf0\xa5\xba\x05\x63\x7d\x26\xbd\x46\x94\x9c\x34\xbc\x0d\x4c\x17\xac\x04\xb0\x28\xfe\x76\x87\x62\x32\xc7\x40\x27\xb6\x53\xc6\x37\x13\x9b\x3d\xf8\x46\x1e\xd2\xcf\x53\x1c\x2a\x0f\x12\x00\x85\x7b\xea\x72\x51\xb3\x2a\x99\xfa\x91\xe4\x99\xaa\x2a\xcb\x99\x8b\xdf\x7a\x8a\x4c\x62\x06\x81\x9e\xbd\x31\xe4\xa6\x36\x41\x11\xe1\x96\x84\xfd\xe3\x31\xc1\x6d\xda\xeb\xf9\x9c\x03\x87\xa8\x5b\x88\x74\x76\x2e\xf8\x6a\x53\x68\x8a\xfd\x56\x2e\xec\xe1\xa2\x7a\x40\xc9\xc0\x48\x8d\x42\x84\x91\x0f\x05\x1c\x23\x07\x76\x16\x03\x28\xca\x38\x98\x54\x8e\x5a\xe0\x4a\x95\xb2\xa8\xeb\xdd\xfd\x5f\x2c\x87\x3c\xf8\x38\xc2\xec\xbe\x1b\x75\x79\x27\x51\x47\xc3\xe4\x5a\xd5\x50\x5a\x65\xbd\x83\x1f\x04\x47\x6b\x3e\x32\x18\xa2\x23\xf0\x89\x06\x82\x9f\xda\xcf\xd5\x5a\x07\x3a\x17\x70\xd8\xcf\xae\x4e\x37\xe0\x6f\xa9\x3f\x2b\xf6\xa2\x0d\xec\xae\x0d\xef\xd9\xff\x63\x54\x7a\xbd\xfb\xc5\xc1\xb5\x57\xd3\x78\x50\xcd\xdb\x0a\x6e\xcb\xf3\xfb\xe7\x49\x14\xff\x1b\x24\x00\x51\x4b\x8e\x8c\x77\xad\x9f\x0b\xe0\x77\xea\xb4\xbf\x7d\xf7\x3c\xed\x3d\xec\x71\xb1\xbd\xad\xc8\x9e\xaf\xe9\x1d\x5e\xaf\x96\x05\xf7\x01\xe2\x13\x0c\x8d\x7c\x6b\xb7\x1f\x52\xe2\x7c\x5e\xb7\xb1\xaa\xa6\xf6\xe2\x84\x0b\x33\x8d\xfb\xc5\x1e\x2c\x9f\xb4\xe9\x64\xe6\xf1\x4f\x00\x00\x00\xff\xff\xb2\xe8\xbb\x3f\x2e\x04\x00\x00")

func main_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_main_tmpl,
		"main.tmpl",
	)
}

func main_tmpl() (*asset, error) {
	bytes, err := main_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "main.tmpl", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1434544943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _struct_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\x4f\x4b\xc4\x30\x10\xc5\xcf\xed\xa7\x18\x4a\x0f\x2a\x52\xef\x82\x17\x41\xc5\xcb\x1e\x3c\x78\x95\x6c\x32\x8d\xc1\x36\x53\x92\xa9\xb8\xd4\xfd\xee\xe6\xdf\x6e\x0b\xc2\xde\xde\xbc\x1f\xf3\x26\x33\x59\x16\x68\x27\xc1\x9f\x70\xff\x00\x5d\x12\xc7\x63\x1d\x4d\x33\x4e\xe4\xd8\x27\xff\xa4\x33\x32\x3d\x08\xab\xe0\xca\x12\x43\xc7\x87\x09\xbb\x57\xbf\x13\x6c\xbe\xf1\x5d\x0c\x33\x5e\x6f\xc9\xd3\x8f\x1c\x66\x15\xbc\xdc\x9a\x4c\xf8\x05\x85\x5e\x3a\x33\xb1\x21\x1b\x49\x72\x23\xd6\x14\x4a\xf0\xec\x66\xc9\xb0\xd4\x75\x95\xc7\xad\x79\x8f\xc2\x1b\x19\x5b\xaa\xea\x26\x30\x87\x3d\x3a\xb4\x12\x3f\x8c\x82\xe6\x0b\x35\x75\x86\xee\xfc\xc1\x33\x8e\x0d\x34\x7b\xe1\xb1\x29\xfb\xb5\x9b\x25\x62\x2c\x86\x15\x8a\x74\xc2\x6a\x84\x16\xc7\x3d\xaa\xb4\x6f\x7e\x7a\x2a\xcf\xa3\x32\xee\x5e\xe8\xed\x34\xf3\x72\xf0\x36\xb9\x37\x38\xa8\x9d\x18\xf1\xb6\xe8\x75\xca\x73\x2c\xcf\xbd\x85\xfe\x3b\xd0\xca\x62\x4a\xe0\x9a\x6c\x14\xe1\x58\x81\x68\x4a\x07\x2c\xcd\x17\x5f\x95\x7e\x21\xeb\xbf\x00\x00\x00\xff\xff\x63\xbc\x02\x72\xfa\x01\x00\x00")

func struct_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_struct_tmpl,
		"struct.tmpl",
	)
}

func struct_tmpl() (*asset, error) {
	bytes, err := struct_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "struct.tmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(1434325587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _types_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x8e\xe2\x30\x0c\x3d\xd3\xaf\xb0\xaa\x95\xa0\x12\xa2\xf7\x95\xf6\xb6\x17\x2e\x08\xad\xf6\x3e\x0a\x1d\xb7\x44\xb4\x71\x69\x82\x10\x62\xfa\xef\x63\xa7\x49\x69\x99\x41\x9a\x5b\xe2\xe7\xf7\xfc\x5e\xe2\xfb\x1d\x7e\xb5\xca\x1d\xe1\xf7\x1f\xd8\xec\xe5\xd0\xf7\x89\x14\x75\xd3\x52\xe7\xac\xaf\x6f\xc3\x39\x40\x86\xcc\xff\x5b\x8b\x76\x1f\x79\xbb\x69\x81\x9b\x5a\x55\x9c\x54\x85\x30\x8a\x7f\x80\x51\x0d\x0a\x94\x0c\xba\xb0\x4a\x16\x8c\xea\x12\x0c\xf1\x05\xcf\xa1\x31\x3d\x61\x45\x1b\x4d\xb9\xbd\x59\x87\x4d\x9a\x09\x67\xb1\x78\x2e\x7b\x32\x9a\x77\xaf\xf8\x13\xa1\xdc\x89\xbf\x28\xf7\xf6\x02\xfe\x22\xdb\x29\xc3\x31\xc2\x5b\xec\x38\xc2\x3a\x5e\x62\xf6\xf1\x9d\xbc\xb0\x38\x19\xf2\x4d\x38\x33\xca\xe0\x2e\x36\xfb\xb1\x2f\xf0\x87\x95\x2c\x49\xca\x8b\x29\x40\x1b\xed\x56\x19\xdc\xa7\xd6\x5a\xd2\xc6\x61\x37\x7c\xdf\x70\x7e\x78\x19\xd1\xb9\xde\x94\x2f\x0e\x42\x30\x4b\x97\xae\x40\xaf\xe4\x7f\x73\x94\xe9\xb0\xc4\x0e\x0d\x63\xcf\xff\x00\xe9\x3f\xac\x34\x1f\x3b\x61\xa4\xc1\xfd\xe4\x4d\x56\xe2\x22\xce\xe0\x35\x38\x5f\xc8\xc9\x1e\xac\xfd\x6e\x84\x89\x7d\x9f\xcd\xed\xe5\x39\x6c\x4b\x70\x47\x9e\xba\xb4\xfc\xb1\x0f\x07\x16\x1c\x09\xc0\x45\x13\x5e\x2f\x2e\x9b\x36\x20\x04\xb8\xa2\x17\xb8\x92\x59\x3a\x38\x20\xa8\x43\x8d\xc2\x2a\xa8\x69\x75\xcd\x41\x2d\x71\x0f\x94\x24\xa3\x35\xb7\xdc\xa0\x50\x75\xad\x4d\x05\x8a\x65\xa9\xdd\x24\xf3\xd0\xf3\x7d\x4f\xff\xd2\x8e\xdc\x91\xdb\xbf\x8b\x9b\x25\xfd\x67\x00\x00\x00\xff\xff\x08\x6b\x9f\xc2\x52\x03\x00\x00")

func types_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_types_tmpl,
		"types.tmpl",
	)
}

func types_tmpl() (*asset, error) {
	bytes, err := types_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "types.tmpl", size: 850, mode: os.FileMode(420), modTime: time.Unix(1434544943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd_types.tmpl":    cmd_types_tmpl,
	"cmd_validate.tmpl": cmd_validate_tmpl,
	"main.tmpl":         main_tmpl,
	"struct.tmpl":       struct_tmpl,
	"types.tmpl":        types_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"cmd_types.tmpl":    &_bintree_t{cmd_types_tmpl, map[string]*_bintree_t{}},
	"cmd_validate.tmpl": &_bintree_t{cmd_validate_tmpl, map[string]*_bintree_t{}},
	"main.tmpl":         &_bintree_t{main_tmpl, map[string]*_bintree_t{}},
	"struct.tmpl":       &_bintree_t{struct_tmpl, map[string]*_bintree_t{}},
	"types.tmpl":        &_bintree_t{types_tmpl, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
