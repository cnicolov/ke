package process

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _cmd_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x50\xcd\x4e\xf3\x30\x10\x3c\xdb\x4f\xb1\x5f\xf4\x1d\x6c\xc9\x4a\xc5\x15\xd4\x03\x07\x8a\x7a\xa0\xea\x1b\x54\x26\xdd\x96\x55\x13\x3b\xd8\x6e\x45\x55\xe5\xdd\x59\x07\xb7\x20\x7e\x0e\xe0\x43\xb2\x9e\x5d\xcf\xce\xcc\xe9\x04\xff\x7b\x9b\x9e\xe0\x7a\x0a\xf5\x32\x17\xc3\x20\x33\x48\x5d\xef\x43\x8a\x23\x3e\x2f\x35\xb7\x7a\xdb\xec\xec\x16\xa1\xb3\xe4\xa4\x7c\x1b\x02\x25\x45\xe5\x63\xc5\xdf\x4d\x97\xf2\x6f\x87\x5b\x5f\x93\x9f\xf4\xc1\x37\x18\xb9\x23\xc5\x0a\x2e\x68\x3c\xc6\x84\x5d\x25\x81\x0f\xaf\xa2\x0d\x38\xcf\x24\xf8\x5c\xa4\x7c\x1e\xd4\x79\xb1\xf8\xca\x30\x49\xc7\x1e\xf3\x5a\x26\x41\xb7\xce\x53\x63\x1d\xac\x63\x85\xc5\xc1\xc2\x76\x68\xce\x97\x65\x71\x7a\x71\x77\x26\x7e\x77\x5c\x32\xa8\x7e\xc0\xbf\xd9\xa9\xa5\xdc\xec\x5d\x33\x46\xa2\x34\x9c\xa4\x58\x53\x30\x90\x30\x26\x03\x01\x9b\x7d\x88\x74\x60\x0d\x07\x0c\x8f\x3e\x72\x91\x4d\x1a\x28\x12\x0c\x60\x08\x59\x53\xc9\xaa\x9e\x3b\x4a\x64\x5b\x8a\xa8\xb4\x14\x1c\x4e\xee\xff\x9b\x82\xa3\x36\x73\x0b\x8e\xb8\x5e\x06\x72\xa9\x75\x8a\x5b\x7a\x8c\x31\x1f\x1f\xeb\xbb\x17\x4a\xea\x8a\x9f\x0d\x97\x97\x1f\x98\xef\xd1\x61\xb0\x09\x67\xd4\x62\x54\x67\x74\xb6\x7a\xb8\x9d\x2f\x0c\xfc\x46\xb4\xbe\xf9\xa3\xaa\xe1\x35\x00\x00\xff\xff\xa7\x64\x28\xf9\x70\x02\x00\x00")

func cmd_main_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_main_tmpl,
		"cmd_main.tmpl",
	)
}

func cmd_main_tmpl() (*asset, error) {
	bytes, err := cmd_main_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_main.tmpl", size: 624, mode: os.FileMode(420), modTime: time.Unix(1434920259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmd_types_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\x51\x4b\xc3\x30\x10\xc7\x9f\x93\x4f\x71\x0e\x1f\x5a\x28\x1d\xbe\x2a\x7b\x50\xd8\xc6\x60\x68\x41\x5f\x7c\x1a\xb1\xbb\xcd\x63\x6d\x52\x93\x6c\x38\x46\xbf\xbb\x97\xda\x95\xea\xf6\x32\xd0\x3c\xb4\x97\xbb\xcb\xff\x7e\xf9\xe7\x70\x80\xeb\x4a\xf9\x77\xb8\x1d\x41\x9a\x85\xa0\xae\x65\x48\x52\x59\x19\xeb\x5d\x93\x9f\xb5\x31\x97\x2a\x95\x6f\xd4\x1a\xa1\x54\xa4\xa5\xfc\x6e\x82\x48\x8a\x81\x71\x03\xfe\xae\x4a\x1f\x7e\x1b\x5c\x9b\x94\xcc\xb0\xb2\x26\x47\xc7\x15\x29\x16\xd0\x65\xdd\xde\x79\x2c\x07\x12\x78\xf1\x28\x5a\x81\x36\x2c\x82\x1f\x2d\xca\xef\xc6\x38\x0c\x16\xa7\x0a\x43\xbf\xaf\x30\x8c\x65\x11\xd4\xcb\xd0\xd5\xc4\x17\x08\x76\xd7\xaf\xeb\x53\x1d\xab\x34\xdf\xb4\x75\xe2\x51\x95\x98\x1c\x37\x59\xeb\x58\xe7\x52\x5f\xaf\xd7\xd2\xa8\x9e\xcd\x9f\x61\x8f\xa5\x5c\x6d\x75\xde\x58\x1b\xc5\x70\x90\x62\x49\x36\x01\x8f\xce\x27\x60\x31\xdf\x5a\x47\x3b\x66\xd8\xa1\x7d\x33\x8e\x83\x00\x9e\x40\x8b\x90\x00\x5a\x1b\x98\x5a\xcf\xd3\x99\x26\x4f\xaa\x20\x87\x51\x2c\x05\x7b\x12\xea\x57\x23\xd0\x54\x04\x6d\xc1\x4f\x95\x66\x96\xb4\x2f\x74\xc4\xa5\xb8\x79\x8e\xb0\x8c\x4b\xc7\x9f\xe4\xa3\x1b\x3e\x56\x77\x27\x7b\xca\x53\xd4\x68\x95\xc7\x09\x15\xe8\xa2\x63\x76\xb2\x78\x79\xcd\xc6\xcf\x09\x5c\x42\x1d\xdf\xfd\x3f\xd6\x74\xfe\xf4\x70\x3f\xff\x7b\x30\x21\x7e\x22\xd5\x5f\x01\x00\x00\xff\xff\xa0\x1b\x81\x1b\x4c\x03\x00\x00")

func cmd_types_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_types_tmpl,
		"cmd_types.tmpl",
	)
}

func cmd_types_tmpl() (*asset, error) {
	bytes, err := cmd_types_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_types.tmpl", size: 844, mode: os.FileMode(420), modTime: time.Unix(1434920259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmd_validate_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\xb1\x6e\xc2\x30\x10\x9d\xed\xaf\xb8\x46\x1d\x6c\x29\x0a\xea\xda\x8a\xb1\x03\x4b\xc5\xd4\x15\xb9\xe1\xa0\x27\x88\x9d\xda\x06\x15\x21\xff\x7b\xcf\xa9\x89\x48\x8b\x04\x03\xb9\xbc\xbb\x7b\xef\xdd\xcb\xf9\x0c\x8f\xbd\x89\x9f\xf0\x3c\x87\x66\x99\x8b\x94\x64\x06\xa9\xeb\x9d\x8f\x61\xc0\x17\xa5\xe6\x56\x6f\xda\x9d\xd9\x22\x74\x86\xac\x94\xbf\x43\xa0\xa4\xa8\x5c\xa8\xf8\x7f\xd3\xc5\xfc\xd8\xe1\xd6\x35\xe4\x66\xbd\x77\x2d\x06\xee\x48\xb1\x82\x11\x0d\xa7\x10\xb1\xab\x6e\x60\xb3\x78\xea\x71\x18\x67\x0b\xb4\x01\xeb\x98\x1c\xbf\x8a\xc5\xbf\x04\x3a\x1b\x12\x99\x65\xbc\x22\xa5\xea\x1f\x72\x21\xcd\x9c\x68\xd7\x79\x69\xa8\xbd\xb1\x7c\x48\x39\xf4\xcd\x74\x58\x5f\x5e\x96\x25\x90\x31\x84\x6b\x9d\xab\x91\x89\xda\x04\xbf\xa1\xa9\xa5\xdc\x1c\x6c\x3b\x24\xa7\x34\x9c\xa5\x58\x93\xaf\x61\x55\x83\xc7\xf6\xe0\x03\x1d\xd9\xc0\x11\xfd\x87\x0b\x5c\x64\xef\x35\x14\xfd\x1a\xd0\xfb\x6c\xa8\xe4\xd9\x2c\x2c\x45\x32\x7b\x0a\xa8\xb4\x14\x1c\x54\xee\x3f\xcc\xc1\xd2\x3e\x13\x0b\xfe\x0c\xcd\xd2\x93\x8d\x7b\xab\xb8\xa5\x25\x94\x9f\x0b\xcd\xeb\x37\x45\xf5\xc4\x6b\x69\xdc\xbc\x62\x7e\x67\xd6\xb5\x89\xa8\x06\x73\x77\x9d\xe9\x97\xbb\xd2\x42\x4c\x45\xd3\x4f\x00\x00\x00\xff\xff\x40\x3d\x2a\x52\x73\x02\x00\x00")

func cmd_validate_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_cmd_validate_tmpl,
		"cmd_validate.tmpl",
	)
}

func cmd_validate_tmpl() (*asset, error) {
	bytes, err := cmd_validate_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "cmd_validate.tmpl", size: 627, mode: os.FileMode(420), modTime: time.Unix(1434920259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _global_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\xcd\x4a\x03\x31\x10\x3e\x6f\x9e\x62\x28\x1e\x2c\xc8\x7a\x17\x7a\x16\x2f\x4b\xc1\x07\x90\x58\xa7\xdb\xd0\x6e\x26\x26\x51\x90\xb6\xef\x6e\x26\x93\x36\x1b\x0f\xd2\xdb\x64\x66\xbe\xbf\xc9\xf1\x08\x77\x4e\xc7\x1d\x3c\xad\xa0\x5f\x73\x71\x3e\x2b\x6e\x9a\xc9\x91\x8f\x21\xf7\x5f\x4a\x9d\x46\x4e\x6f\xf6\x7a\x44\xb8\xe2\x4e\x60\xf5\x84\x3c\x52\x02\x81\x7b\xd5\xa5\xa9\xd9\x82\xa5\xf4\xc0\xcf\xb2\xb8\xd8\xe3\x48\xbd\xa1\xc7\xf0\x13\x22\x4e\x8b\x25\x63\xba\xee\x6f\x3b\x83\xd1\x7e\x64\x46\xae\xbd\xb6\x49\xaf\xf8\x19\x92\xd6\xc3\xe5\xb1\x2e\xbe\xaf\x5e\x33\x21\x6b\x8b\x91\x19\xa6\x81\x88\x1f\x5e\xae\x52\x4b\xa5\xaa\x96\x23\x63\x23\x7a\xb9\x89\xd4\x42\xfe\xad\xbd\x24\x97\x66\x3f\x48\x74\x58\x35\xdd\x57\xfa\xf2\x1b\x2c\x87\xbc\x44\xa9\xec\x1e\xb7\x29\x42\x90\x25\x96\x78\x3e\xd0\xbb\x3e\xb4\x0a\x69\x49\xd8\x4f\x30\x92\x6d\x64\xc2\xff\xf4\xb7\x1e\x8a\x95\xde\xa0\x7e\x75\xc9\xd2\x0f\x14\x77\xc6\x8e\x73\xf2\xdf\x00\x00\x00\xff\xff\x16\x9e\x56\x8b\x25\x02\x00\x00")

func global_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_global_tmpl,
		"global.tmpl",
	)
}

func global_tmpl() (*asset, error) {
	bytes, err := global_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "global.tmpl", size: 549, mode: os.FileMode(420), modTime: time.Unix(1434920259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x6f\xd4\x30\x10\x3d\xc7\xbf\x62\x14\x21\xb4\x41\x55\xb8\x23\x71\x01\x41\xb5\x07\x96\xaa\x70\xaf\x5c\x7b\x92\x9a\xee\xda\xa9\xed\x45\xaa\xb2\xf9\xef\xd8\x63\xe7\x8b\x5d\xa9\xed\x6d\x32\x1f\x6f\xde\xbc\xf1\xa4\xef\xe1\x5d\xc7\xfd\x03\x7c\xfa\x0c\xf5\x4d\x34\x86\x81\x45\xa7\x3a\x74\xc6\x7a\x47\xfe\x6d\xb6\x43\xa8\xe3\xe2\x91\xb7\x08\x53\xdd\x09\x34\x3f\x60\x0c\xb1\x54\x02\x1b\x56\x94\x16\x9b\x3d\x0a\x5f\xb2\x60\x3f\x62\x6b\x6a\x65\x3e\xfe\x71\x46\x47\x47\x28\x55\x0d\x68\x13\x32\xf1\x29\xa3\x4c\x49\xee\xd9\x79\x3c\x94\x55\x04\x2c\x8a\xff\xdd\x54\x8c\x5a\x52\xbb\x68\x5b\xae\x03\x99\x4c\x76\x17\x88\x5c\x8d\x1f\x37\x79\xa8\x69\x10\x02\x8c\xbd\x13\xcb\x45\xcd\xaa\x24\xf1\x89\xc9\x73\xab\x8a\xb1\xb9\x57\x18\x2d\x34\xf1\xcf\x1d\x92\x36\xbf\x83\xe1\xc6\xfc\x30\x17\x45\xea\xad\x16\xfb\xa3\xc4\x5f\xde\x1e\x85\xdf\xea\x1f\x5c\xe9\x6b\xd4\x68\xb9\x47\xf9\xd5\x48\x9c\xd8\x24\xa0\x13\x48\x74\xc2\xaa\xce\x2b\xa3\x53\x8c\xfc\x63\x42\x7d\x6d\x76\x49\x65\x70\x04\x09\x7d\x48\x59\x28\x99\xb2\xbe\x70\xa7\x44\x2a\x2f\x8a\x0f\x91\x32\x36\x68\x51\x0b\xbc\x53\xf2\x4c\x63\x28\xef\xb9\xc3\x32\x4f\xbc\xd6\x69\x31\x7c\xfa\xc8\xc3\xe3\xe1\x1e\x25\xc9\x4a\x0d\xbf\xd1\xe7\xa2\x61\x4a\x08\x74\x6f\xc7\xce\x2f\xc1\xaf\xf1\x1b\x85\x7b\x99\xf7\x48\xf6\xdc\xeb\x7b\xfc\x1c\xeb\x49\xba\x94\x70\x41\xbb\x45\x98\x64\x3b\x41\x6b\xf2\x2b\x8d\x92\xb6\x86\xc4\xcd\xf5\x2f\x8e\xbf\x7a\x0a\x0b\xe2\xcd\x51\x0b\x50\x5a\xf9\x4d\x15\xd7\xf1\x8a\x17\x72\xb6\xb0\xad\xf6\x68\x1b\x2e\x70\x21\xf4\x24\xdc\xfa\x70\xa0\xbc\xc5\x56\x85\xc5\xd9\x88\x77\x61\x6b\x9b\x38\x73\xa8\x0e\x57\x9c\x4e\xf4\x04\x4f\x47\xe3\x23\xf4\x15\x8c\xb1\x2c\xc7\x1c\xc8\x87\x4a\x24\x7f\x36\x9b\xf7\xe7\x2f\xae\x1f\xaa\x8a\xad\x14\x99\xcd\x81\x0e\xe3\x95\xd7\xfc\x97\x5b\xb8\x83\xe4\xaa\x77\xc6\x3f\x28\xdd\xb2\x95\xb2\x6f\xbc\xe6\x04\x38\xff\xac\x32\xe1\x0b\xd8\x8c\x96\x91\xfd\xf9\x84\xfa\xe1\x5f\x00\x00\x00\xff\xff\x8a\xc0\x85\x79\xfc\x04\x00\x00")

func main_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_main_tmpl,
		"main.tmpl",
	)
}

func main_tmpl() (*asset, error) {
	bytes, err := main_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "main.tmpl", size: 1276, mode: os.FileMode(420), modTime: time.Unix(1435413691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _types_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xcb\x6a\xc3\x30\x10\x3c\x47\x5f\xb1\x98\x1e\x62\x08\xce\xbd\xd0\x0f\xe8\xc5\x84\xb6\xf7\x20\xdc\xb5\x23\x82\x25\x47\x92\x0b\xc1\xc9\xbf\x77\xf5\xb2\x55\x97\x40\x7b\x5b\xed\xec\x8c\x66\x1f\xd3\x04\x4f\x03\xb7\x27\x78\x7e\x81\xea\xe0\x82\xfb\x9d\xb9\xa4\xe8\x07\xa5\xad\xf1\xf9\xd7\x18\x47\x48\x2a\xf9\x71\x1d\xd0\x1c\x12\xaf\xce\x13\x54\x34\xf0\xe6\xcc\x3b\x84\x59\xfc\x06\x92\xf7\xe8\x20\x16\x74\x61\xcb\x36\x84\x8a\x16\xa4\xa2\x07\x5e\x62\x61\x71\xc6\x4e\x55\x42\xed\xcd\xd5\x58\xec\x8b\xd2\x71\x36\x9b\x75\xda\x93\x51\x7e\x7a\xc5\xbf\x08\xed\xad\xf3\x97\xe4\x8e\x0f\xe0\x5f\xb2\x9a\x4b\x6a\x23\xce\xa2\xa6\x16\x76\xe9\x91\x7a\x9f\xe7\xe4\x85\x9d\x93\xd0\x5f\xc6\xf9\x41\x09\xee\x52\xb1\xff\xf6\x01\xbe\x58\x29\x19\x6b\x47\xd9\x80\x90\xc2\x6e\x4b\x98\x72\x6b\x83\x12\xd2\xa2\x0e\xeb\x0b\xf1\xe2\x25\xa1\x55\x1d\xa6\xef\xaa\xf2\xf4\xbb\x1a\x75\x83\xab\xdf\x72\x75\x8d\x2d\x75\x6c\x42\x99\xfb\xc2\xaf\x79\xd6\x27\x18\x35\x4a\xc2\xd6\x0b\x82\xe2\x0d\x3b\x41\xa1\x76\x8c\x22\xb6\x95\x0d\x6b\xeb\x7c\x10\x9f\x6e\x2e\xdc\xca\x0d\x2e\xa3\xb2\xce\xcc\x0e\x12\xe6\x6d\xaf\x01\x93\x4c\x97\xb9\x6b\xf2\xfd\xff\x7d\x7d\x71\x0d\x47\x58\xae\x3d\x8e\x89\xee\xd9\x9e\x84\xec\xd8\x2c\xff\x1d\x00\x00\xff\xff\x1c\x4d\x87\x22\x26\x03\x00\x00")

func types_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_types_tmpl,
		"types.tmpl",
	)
}

func types_tmpl() (*asset, error) {
	bytes, err := types_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "types.tmpl", size: 806, mode: os.FileMode(420), modTime: time.Unix(1434920259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd_main.tmpl":     cmd_main_tmpl,
	"cmd_types.tmpl":    cmd_types_tmpl,
	"cmd_validate.tmpl": cmd_validate_tmpl,
	"global.tmpl":       global_tmpl,
	"main.tmpl":         main_tmpl,
	"types.tmpl":        types_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"cmd_main.tmpl":     &_bintree_t{cmd_main_tmpl, map[string]*_bintree_t{}},
	"cmd_types.tmpl":    &_bintree_t{cmd_types_tmpl, map[string]*_bintree_t{}},
	"cmd_validate.tmpl": &_bintree_t{cmd_validate_tmpl, map[string]*_bintree_t{}},
	"global.tmpl":       &_bintree_t{global_tmpl, map[string]*_bintree_t{}},
	"main.tmpl":         &_bintree_t{main_tmpl, map[string]*_bintree_t{}},
	"types.tmpl":        &_bintree_t{types_tmpl, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
